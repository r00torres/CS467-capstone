<script src="/static/three.js"></script>

<script src="/static/OrbitControls.js"></script>
<script src="/static/OBJLoader.js"></script>
<script src="/static/GLTFLoader.js"></script>
<script src="/static/MTLLoader.js"></script>
<script src="/static/WebGL.js"></script>


<script src="/static/stats.min.js"></script>

<link rel="stylesheet" type="text/css" href="/static/css/game-ui.css">

<script src="/static/gameUI.js"></script>
<script src="/static/buildUI.js"></script>
<script src="/static/save.js"></script>
<script src="/static/load.js"></script>
<script src="/static/assetLoaders.js"></script>
<script src="/static/path.js"></script>
<script src="/static/menu.js"></script>


<script src="/static/map1.js"></script>
<script src="/static/map2.js"></script>
<script src="/static/map3.js"></script>
<script src="/static/pirateT.js"></script>
<script src="/static/cannonT.js"></script>
<script src="/static/ovi.js"></script>
<script src="/static/rap.js"></script>
<script src="/static/trex.js"></script>
<script src="/static/rules.js"></script>

<script type='text/javascript' src='/static/Tween.js'></script>
<script>

	//Music: www.bensound.com Royalty Free Music
	//Sound effects from soundbible.com

	//Global variables
	var scene, camera, renderer, controls, raycaster, mouse, listener;

	//sound variables
	var sound, sound2, dinoSound, played;


	var container, stats, countdown, soundButton;

	//animation variables
	const mixers = [];
	const clock = new THREE.Clock();


	//Game map variables
	var gridT = [];
	var dinos = [];
	var towers = [];
	var projectiles = [];
	var currMap = 1;
	//var totWaves, timeXwave;
	//var coins = 100;
	//var curWave = 1;
	//var lives = 3;

	initGameUI(coins, lives, curWave);


	/*We need to RENDER the SCENE with a CAMERA*/
	function init() {

		//for stats
		//https://github.com/mrdoob/three.js/blob/master/examples/webgl_interactive_lines.html
		container = document.createElement('div');
		document.body.appendChild( container );

		var info = document.createElement( 'div' );
		info.style.position = 'absolute';
		info.style.top = '10px';
		info.stylewidth = '100%';
		info.style.textAlign = 'center';
		container.appendChild( info );


		//Create a new scene
		scene = new THREE.Scene();
		scene.background = new THREE.Color( 0xadd8e6 );
		scene.fog = new THREE.Fog( 0xadd8e6, 250, 500 );
		console.log("scene", scene);

		//Create a new camera
		//( FOV, aspect ratio, near clipping plane, far clipping plane )
		camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 500 );
		camera.position.set( 0, 10, -10 );
		camera.lookAt( 0,0,0 );

		//create audio listener
		listener = new THREE.AudioListener();
		camera.add(listener);
		//start audio
		sound = new THREE.Audio(listener);
		var audioLoader = new THREE.AudioLoader();
		audioLoader.load('/static/bensound-instinct.mp3', function(buffer){
			sound.setBuffer(buffer);
			sound.setLoop(true);
			sound.setVolume(2.0);
			sound.play();
		});
		//wave start sound
		dinoSound = new THREE.Audio(listener);
		var dinoAudioLoader = new THREE.AudioLoader();
		dinoAudioLoader.load('/static/TyrannosaurusRex-SoundBible.com-45786848.wav', function(buffer){
			dinoSound.setBuffer(buffer);
			dinoSound.setLoop(false);
			dinoSound.setVolume(8.0);
			dinoSound.setPlaybackRate(1);
		});
		//dino defeated sound
		dinoSound2 = new THREE.Audio(listener);
		var dinoAudioLoader2 = new THREE.AudioLoader();
		dinoAudioLoader2.load('/static/VelociraptorCall-SoundBible.com-1782075819.wav', function(buffer){
			dinoSound2.setBuffer(buffer);
			dinoSound2.setLoop(false);
			dinoSound2.setVolume(6.0);
			dinoSound2.setPlaybackRate(1);
		});


		console.log("camera init", camera);

				//Create the renderer
		renderer = new THREE.WebGLRenderer();

		//Set the render size
		renderer.setSize( window.innerWidth, window.innerHeight );

		renderer.setPixelRatio( window.devicePixelRatio );

		//for use with gltf/glb files
		renderer.gammaOutput = true;
		renderer.gammaFactor = 2.2;

		//Add the renderer to the html document
		document.body.appendChild( renderer.domElement );

			//three.js https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometry_text_shapes.html
		window.addEventListener( 'resize', onWindowResize, false );

		//window.addEventListener( 'touchstart', )

		/*Adding orbit controls. Allows camera to move*/
		controls = new THREE.OrbitControls( camera, renderer.domElement );

		stats = new Stats();
		//Uncomment for FPS stats
		container.appendChild( stats.dom );

		controls.target0 = new THREE.Vector3( 0, 5, 0 );

		//controls.target0;
		controls.zoom0;
		controls.position0;

		controls.enabled = true;
		//This sets the angle to which we can't look "under" the map
		controls.maxPolarAngle = Math.PI / 2;

		console.log("controls",controls);
		console.log("camera",camera);

		//for a static menu
		controls.enableKeys = false;

		//Raycaster
		raycaster = new THREE.Raycaster();
		mouse = new THREE.Vector2();

		//need to add a light so that colors and textures of loaded objects
		//will show up
		var directLight = new THREE.DirectionalLight(0xffffff, 2);
		directLight.position.set( 20, 20, 20 );
		scene.add(directLight);
		var directionLight1
		var hemiLight = new THREE.HemisphereLight( 0x000000, 0x000000, 4 );
		hemiLight.position.set( 0, 20, 0 );
		scene.add(hemiLight);
		animate();
		//Load the menu

		//https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometry_text_shapes.html

		menu();

		//play();

	}


	function onWindowResize() {

		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize( window.innerWidth, window.innerHeight );

	}

	function render() {

		var tc = TWEEN.getAll();
		if(tc.length > 0){
			//console.log(tc.length);
			TWEEN.update();
		}
		//TWEEN.update();
		controls.update();

		const delta = clock.getDelta();

		mixers.forEach( ( mixer ) => { mixer.update( delta ); } );

		renderer.render( scene, camera );


	}


	//Creating the opening view of the game's menu



	function getCoins(){
		console.log("Current Coins var", coins);
		return coins;
	}
	function setCoins( newValue ){
		console.log("coins", coins);
		coins = newValue;
	}
	function getLives(){
		console.log("Current Lives var", lives);
		return lives;
	}
	function setLives( newValue ){
		console.log("lives", lives);
		lives = newValue;
	}
	function getWave(){
		console.log("Current Wave", curWave);
		return curWave;
	}
	function setWave( newValue ){
		console.log("wave:", curWave);
		curWave = newValue;
	}
	function setMap( newValue ){
		console.log("map:", currMap);
		currMap += 1;
	}

	//Creating the game engine and functionality
	//play should have map and if loaded
	function play(loaded) {

		//document.removeEventListener( 'dblclick', onDocumentMouseDown, false );
		//clearBuildMenu();
		controls.reset();

		controls.minDistance = 10;
		controls.maxDistance = 50;

		console.log("controls", controls);
		console.log("tween c", TWEEN.getAll());

		if(loaded == true){
			console.log("cookie loaded");
		}
		else{
			console.log('PLAY currMap', currMap);
			curWave = 0;
			console.log("currMap", currMap);
			if( currMap == 1 ){
				lives = parseInt(map1.lives);
				coins = parseInt(map1.coins);
				totWaves = parseInt(map1.waves);
			}
			if( currMap == 2 ){
				lives = parseInt(map2.lives);
				coins = parseInt(map2.coins);
				totWaves = parseInt(map2.waves);
			}
			if( currMap == 3 ){
				lives = parseInt(map3.lives);
				coins = parseInt(map3.coins);
				totWaves = parseInt(map3.waves);
			}
			updateGameUIbar("lives", lives)
			updateGameUIbar("coins", coins)
			updateGameUIbar("totWaves", totWaves)

		}

		//viewBuildMenu();
		//setLives(3);
		//getLives();
		//setWave(1);
		if(stopAnimation){
			console.log("sa******************************",stopAnimation);
			stopAnimation = false;
			//return;
		}
		// if(document.getElementById("buildUIcontainer") == false ){
		//
		//
		// }
		//load.js
		//loadGame();
		/*

		Game variables to be set by map file:

		Total Waves = totWaves
		Current Wave = curWave
		Time between Waves = timeXwave
		Player lives = lives

		Player coins = coins



		var towerClock = new THREE.Clock();

		clock.startTime;

		*/

		// //create a button to pause the audio
		// soundButton = document.createElement('button');
		// soundButton.style.position = 'absolute';
		// soundButton.id = 'soundButton';
		// soundButton.style.width = '100px';
		// soundButton.style.height = '50px';
		// soundButton.style.background = 'green';
		// soundButton.style.top = '0px';
		// soundButton.style.left = '375px';
		// soundButton.style.textAlign = 'center';
		// soundButton.innerHTML = 'Music';
		// soundButton.style.color = 'white';
		//
		// document.body.appendChild(soundButton);
		// soundButton.onclick = function(){
		// 	if(sound.isPlaying){
		// 		sound.pause();
		// 		soundButton.style.background = 'red';
		// 	}
		// 	else{
		// 		soundButton.style.background = 'green';
		// 		sound.play();
		// 	}
		// };

		//add a countdown timer
		countdown = document.createElement('div');
		countdown.style.position = 'absolute';
		countdown.id = 'countdown';
		countdown.style.width = "200px";
		countdown.style.height = '50px';
		countdown.style.background = 'green';
		countdown.style.top = '50px';
		countdown.style.left = '50%';
		countdown.style.textAlign = 'center';
		document.body.appendChild(countdown);

		played = 1;
		var timeleft = 10;
		if( document.getElementById("countdown") == true){
			var countdownTimer = setInterval(function(){
				document.getElementById("countdown").innerHTML = timeleft + " seconds remaining";
				timeleft -= 1;
				if(timeleft == -1){
					document.getElementById("countdown").innerHTML = "Start"
					if(played == 1)
					{
						dinoSound.play();
					}
				}
				else if(timeleft < -1){
					clearInterval(countdownTimer);
					document.getElementById("countdown").style.display = "none";
				}
			}, 10000);
		}

		var setgameUI = document.getElementById("gameUIbar");
	  setgameUI.style.display = "table-cell";

		initBuildUI();
		//initGameUI(coins, lives, curWave);

		//allows user to move the map
		controls.enabled = true;

		/*Adding a plane to the scene*/
		var planeGeo = new THREE.PlaneBufferGeometry( 4, 4 );
		planeGeo.rotateX( - Math.PI / 2 );

		var gridTiles = [];

		//var gridTiles = [];timeleft
		var path = [];
		function addTiles(m, mapName){

			if( mapName == "coast" ){
				//25m radius
				var mapbg = "mapbg";
				var mapbgRotation = Math.floor(Math.random() * 3);
				var mapPos = new THREE.Vector3( 0, -.1, 0 );
				//var mapgltf = enviroLoader("/static/enviro/beach.glb", mapPos, mapbgRotation, mapbg);

				var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0xf2d527 } ) );
				plane.scale.set( 15, 15, 15 );
				plane.position.y = -.1;
				scene.add( plane );
			}
			console.log("adding tiles", m);
			//gets the length of a single array (map0 a,b,a,b)
			var arrZ = m[0].length;
			//get the number of arrays (map0, map1, map2, map3)
			var arrX = m.length;
			console.log("arr", arrX, arrZ);

			//
			for( var i = 0, x = -(arrX/2); x < (arrX/2); x++, i++ ){
				var gridRow = [];
				for( var j = 0, z= -(arrZ/2); z < (arrZ)/2; z++, j++ ){
					console.log("\n",x,z, m[i][j], i, j);

					//Creating new variable plane every instance and adding to
					//the scene. Position offset by 4 because it seems to be the
					//internal size of that object
					if(m[i][j] == '-'){
						var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0x556600 } ) );
						plane.position.x = 4*x+2;
						plane.position.z = 4*z+2;
						//name need for raycaster build logic
						plane.name = "unbuildable";
						gridRow.push( plane );
						//for testing raycaster
						gridT.push( plane );

						var ubName = "palm";
						var palmRotation = Math.floor(Math.random() * 3);
						var palmPos = plane.position;
						var palm = enviroLoader("/static/enviro/palm.glb", palmPos, palmRotation, ubName);

						scene.add( plane );
					}
					else if(m[i][j] == '.'){
						var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0x416600 } ) );
						plane.position.x = 4*x+2;
						plane.position.z = 4*z+2;
						//name need for raycaster build logic
						plane.name = "buildable";
						gridRow.push( plane );
						//for testing raycaster
						gridT.push( plane );
						scene.add( plane );
					}
					else if (m[i][j] == '*'){
						var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0xf2d527 } ) );
						plane.position.x = 4*x+2;
						plane.position.z = 4*z+2;
						plane.name = "path";
						gridRow.push( plane );
						path.push(plane);
						//for testing raycaster
						gridT.push( plane );

						//var palmPos = plane.position;
						//var palm = enviroLoader("/static/enviro/palm.glb", palmPos);

						scene.add( plane );
					}
					else if (m[i][j] == 's'){
						var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0x4568c2 } ) );
						plane.position.x = 4*x-5;
						plane.position.z = 4*z-3;
						plane.position.y = -1;
						plane.name = "start";
						gridRow.push( plane );
						console.log("start ", plane);
						//for testing raycaster
						gridT.push( plane );

						var startName = "cave";
						var caveRotation = -0.3;
						var cavePos = plane.position;
						var cave = enviroLoader("/static/enviro/cave.glb", cavePos, caveRotation, startName);

						scene.add( plane );
					}
					else if (m[i][j] == 'e'){
						var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0xa12b0d } ) );
						plane.position.x = 4*x+2;
						plane.position.z = 4*z+2;
						plane.name = "end";
						gridRow.push( plane );
						console.log("end", plane);
						//for testing raycaster
						gridT.push( plane );

						var endName = "dinoZone";
						var endRotation = 0;
						var endPos = plane.position;
						var endPoint = enviroLoader("/static/enviro/getaway.glb", endPos, endRotation, endName);

						scene.add( plane );
					}
				}
				gridTiles.push( gridRow );
				console.log("gridRow", gridRow );
			}
		}
				//addTiles(m);
		//addTiles(maplevel1);
		console.log("path ", path);

		//create a line to show the path
		var material = new THREE.LineBasicMaterial({
			color: 0x0000ff
		});


		var geometry = new THREE.Geometry();



		var testPath = [];
		var levelX = 0;
		var levelZ = 0;
		//currMap = 1;

		if( currMap == 1 ){
			testPath = map1.dinoPath.map(arr => arr.slice());
			levelX = map1.level1x;
			levelZ = map1.level1z;
			addTiles(maplevel1, map1.name);
		}
		else if( currMap == 2 ){
			testPath = map2.dinoPath.map(arr => arr.slice());
			levelX = map2.level2x;
			levelZ = map2.level2z;
			addTiles(maplevel2, map2.name);
		}
		else if( currMap == 3 ){
			testPath = map3.dinoPath.map(arr => arr.slice());
			levelX = map3.level3x;
			levelZ = map3.level3z;
			addTiles(maplevel3, map3.name);
		}



		makePath(testPath, levelX, levelZ);

		//add the vertices to the path
		for(var i=0; i<testPath.length; i++)
		{
			geometry.vertices.push(
			new THREE.Vector3( testPath[i][0], 0, testPath[i][1] )
			)
		}

		//add the line of the path to the scene
		//the line is not nescessary for the movement of the cube, but makes the
		//path easier to see
		var line = new THREE.Line( geometry, material );
		scene.add( line );


		setTimeout(function(){
			//curWave = 1;
			mapWaves(testPath, curWave);

		}, 10000);


		console.log("dinos array", dinos );
		viewBuildMenu(getCoins(), pirateT.cost, cannonT.cost, cannonT.cost);



		function tileHover( event ) {

		}

		/***********************************
		addTower function now in pirateT.js
		************************************/

		//To add towers, use double click



	}


	// function onDocumentMouseDown( event ) {
	// 	event.preventDefault();
	// 	mouse.set( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1 );
	//
	// 	raycaster.setFromCamera( mouse, camera );
	// 	var intersects = raycaster.intersectObjects( gridT );
	//
	// 	if(intersects[0].object.name == "buildable") {
	// 		scene.remove(intersects[0].object);
	// 		//addpirateT( intersects[0].object.position, scene, gridT, towers );
	// 	}
	// }
	document.addEventListener( 'dblclick', onDocumentMouseDown, false );


	function onDocumentMouseDown( event ) {




		event.preventDefault();

		mouse.set( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1 );

		raycaster.setFromCamera( mouse, camera );

		var intersects = raycaster.intersectObjects( gridT );

		console.log(intersects);

		if(intersects[0].object.name == "buildable") {


			var possibleCoins = 0;

			//shows build options for player's current coin at this location (need to change first param to coin
			//last param to cost of last tower

			viewBuildMenu(getCoins(), pirateT.cost, cannonT.cost, cannonT.cost);

			//remove the previous click event (which was to build for last location)
			document.getElementById("build-musket-button").removeEventListener("click", clickMusket);
			document.getElementById("build-cannon-button").removeEventListener("click", clickCannon);
			document.getElementById("build-net-button").removeEventListener("click", clickNet);
			//document.getElementById("")
			document.getElementById("build-cancel-button").removeEventListener("click", clickCancel);


			//create building sound
			sound2 = new THREE.Audio(listener);
			var audioLoader2 = new THREE.AudioLoader();
			audioLoader2.load('/static/Hammer.wav', function(buffer){
				sound2.setBuffer(buffer);
				sound2.setLoop(false);
				sound2.setVolume(8.0);
				sound2.setPlaybackRate(1);
			});

			//new build functions at this location
			clickMusket = function () {
					console.log("Clicked Musket Tower")
						clearBuildMenu();
					coins = coins - pirateT.cost;
					updateGameUIbar("coins", coins);
					intersects[0].object.name = "tower";
					var towerName = "musketT";
					//addpirateT( intersects[0].object.position, scene, gridT, towers );
					towerLoader( '/static/towers/musket1.glb', intersects[0].object.position, gridT, towers, towerName );
					//start audio
					sound2.play();
					};

			clickCannon = function() {
					console.log("Clicked Cannon Tower")
						clearBuildMenu();
					coins = coins - cannonT.cost;
					updateGameUIbar("coins", coins);
					//getCoins();
					intersects[0].object.name = "tower";
					var towerName = "cannonT";
					//addcannonT( intersects[0].object.position, scene, gridT, towers );

					towerLoader( '/static/towers/canontowermodified2.glb', intersects[0].object.position, gridT, towers, towerName );
					console.log("towers", towers);
					//start audio
					sound2.play();
					};

			clickNet = function() {
					console.log("Clicked Net Tower")
						clearBuildMenu();
					coins = coins - pirateT.cost;
					updateGameUIbar("coins", coins);
					intersects[0].object.name = "tower";
					var towerName = "cannonT";
					//addcannonT( intersects[0].object.position, scene, gridT, towers );

					towerLoader( '/static/towers/canontowermodified2.glb', intersects[0].object.position, gridT, towers, towerName );
					console.log("towers", towers);
					//addcannonT( intersects[0].object.position, scene, gridT, towers );
					sound2.play();
					};


			//new events for on click at this location
			document.getElementById("build-musket-button").addEventListener("click", clickMusket);
			document.getElementById("build-cannon-button").addEventListener("click", clickCannon);
			document.getElementById("build-net-button").addEventListener("click", clickNet);
			document.getElementById("build-cancel-button").addEventListener("click", clickCancel);

		}
		else {

			console.log("Can not build", intersects[0].object.name);

		}

		//
	}


	// var points = [];
	// for(var i=0; i<testPath.length; i++)
	// {
	// 	points.push(new THREE.Vector3(testPath[i][0], 0, testPath[i][1]));
	// }
	//
	// spline = new THREE.CatmullRomCurve3(points);





	init();

	var stopAnimation = false;
	function animate(){

		if(stopAnimation){
			console.log("stopped");
		}
		else{



			//https://stackoverflow.com/questions/14465495/how-do-i-stop-requestanimationframe
			if( towers.length >= 1 ){
				for( var i = 0; i < towers.length; i++ ) {
		    	//console.log("for i", i );
		      var tc = towers[i].children;
		      for( var j = 0; j < tc.length; j=j+2) {
						attack( coins, towers, dinos );
		      };
				};

			}
			if( projectiles.length > 0 ){
				for( var p = 0; p < projectiles.length; p++){

					projectiles[p].position.y -= .2;

					if ( projectiles[p].position.x > projectiles[p].userData.x ){
						projectiles[p].position.x -= .75;
					}
					if ( projectiles[p].position.z > projectiles[p].userData.z ){
						projectiles[p].position.z -= .75;

					}
					if ( projectiles[p].position.x < projectiles[p].userData.x){
						projectiles[p].position.x += .75;

					}
					if ( projectiles[p].position.z < projectiles[p].userData.z){
						projectiles[p].position.z += .75;

					}

					projectiles[p].position.y -= .2;

					if (projectiles[p].position.y <= 0){

						scene.remove(projectiles[p]);
						projectiles.splice(p, 1);

					}
				}

			}
			if(camera.position.x > 50){
				camera.position.x = 50;
				//camera.lookAt(0,0,0);
			}
			if(camera.position.x < -50 ){
				camera.position.x = -50;
				//camera.lookAt(0,0,0);

			}
			if(camera.position.z > 50){
				camera.position.z = 50;
				//camera.lookAt(0,0,0);

			}
			if(camera.position.z < -50){
				camera.position.z = -50;
				//camera.lookAt(0,0,0);

			}

			// var tweencheck = TWEEN.getAll();
			requestAnimationFrame(animate);
			// if(tweencheck.length > 0  ){
			var tc = TWEEN.getAll();
			if(tc.length > 0){
				//console.log(tc.length);
				 TWEEN.update();
				 //console.log(tc.length);
			}

			// }

			const delta = clock.getDelta();
			mixers.forEach( ( mixer ) => {
				mixer.update( delta );
			});
			renderer.render( scene, camera );
			controls.update();
			//Uncomment for FPS stats
			stats.update();
		}
	}

	/*

	Resources:
	https://www.august.com.au/blog/animating-scenes-with-webgl-three-js/
	https://threejs.org/docs/#manual/en/introduction/Creating-a-scene
	https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometry_text_shapes.html



	*/

</script>
