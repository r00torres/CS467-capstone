<script src="/static/three.min.js"></script>

<script src="/static/OrbitControls.js"></script>

<script src="/static/map1.js"></script>

<script type='text/javascript' src='/static/Tween.js'></script>

<script>

    /*We need to RENDER the SCENE with a CAMERA*/
	
	//Create a new scene
	var scene = new THREE.Scene();
	
	//Create a new camera
	//( FOV, aspect ratio, near clipping plane, far clipping plane )
	var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 500 );
	camera.position.set( 0, 10, -10 );
	camera.lookAt( 0, 0, 0 );
	
	//Create the renderer
	var renderer = new THREE.WebGLRenderer();
	
	//Set the render size
	renderer.setSize( window.innerWidth, window.innerHeight );
	
	//Add the renderer to the html document
	document.body.appendChild( renderer.domElement );

	/*Adding a plane to the scene*/
	var planeGeo = new THREE.PlaneBufferGeometry( 4, 4 );
	planeGeo.rotateX( - Math.PI / 2 );	
        

	//Raycaster
	var raycaster = new THREE.Raycaster();
	var mouse = new THREE.Vector2();

	/*Adding orbit controls. Allows camera to move*/
	var controls = new THREE.OrbitControls( camera, renderer.domElement );
	controls.target = new THREE.Vector3( 0, 5, 0 );
	controls.enabled = true;
	//This sets the angle to which we can't look "under" the map
	controls.maxPolarAngle = Math.PI / 2;	

/*
	
	function will take the map array and add it to the scene
	
	Iterate through the arrays
	i, j will be used in order to offset the positions
	
*/
var gridT = [];
var gridTiles = [];
var path = [];
function addTiles(m){
	console.log("adding tiles", m);
	//gets the length of a single array (map0 a,b,a,b)
	var arrZ = m[0].length;
	//get the number of arrays (map0, map1, map2, map3)
	var arrX = m.length;
	console.log("arr", arrX, arrZ);
	
	//
	for( var i = 0, x = -(arrX/2); x < (arrX/2); x++, i++ ){
		var gridRow = [];
		for( var j = 0, z= -(arrZ/2); z < (arrZ)/2; z++, j++ ){
			console.log("\n",x,z, m[i][j], i, j);
					
			//Creating new variable plane every instance and adding to
			//the scene. Position offset by 4 because it seems to be the
			//internal size of that object
			if(m[i][j] == '.'){ 
				var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0x416600 } ) );
				plane.position.x = 4*x+2;
				plane.position.z = 4*z+2;

				//name need for raycaster build logic
				plane.name = "buildable";

				gridRow.push( plane );

				//for testing raycaster
				gridT.push( plane );
				scene.add( plane );
			} 

			else if (m[i][j] == '*'){
				var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0xf2d527 } ) );
				plane.position.x = 4*x+2;
				plane.position.z = 4*z+2;
				gridRow.push( plane );

				path.push(plane);

				//for testing raycaster
				gridT.push( plane );
				scene.add( plane );
			}

			else if (m[i][j] == 's'){
				var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0x4568c2 } ) );
				plane.position.x = 4*x+2;
				plane.position.z = 4*z+2;
				plane.name = "start";
				gridRow.push( plane );
				console.log("start ", plane);

				//for testing raycaster
				gridT.push( plane );
				scene.add( plane );
			}	

			else if (m[i][j] == 'e'){
				var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0xa12b0d } ) );
				plane.position.x = 4*x+2;
				plane.position.z = 4*z+2;
				plane.name = "end";
				gridRow.push( plane );
				console.log("end", plane);

				//for testing raycaster
				gridT.push( plane );
				scene.add( plane );
			}					
		}
		gridTiles.push( gridRow );
		console.log("gridRow", gridRow );
	}
}

//addTiles(m);
addTiles(map.level1);
console.log("path ", path);

//create a line to show the path
var material = new THREE.LineBasicMaterial({
	color: 0x0000ff
});

var geometry = new THREE.Geometry();
/*geometry.vertices.push(
	new THREE.Vector3( path[0].position.x, 0, path[0].position.z ),
	new THREE.Vector3( path[1].position.x, 0, path[1].position.z ),
);*/

//convert the path to usable coordinates
makePath(map.path1, map.level1x, map.level1z);

//add the vertices to the path
for(var i=0; i<map.path1.length; i++)
{
	geometry.vertices.push(
	new THREE.Vector3( map.path1[i][0], 0, map.path1[i][1] )
	)
}

//add the line of the path to the scene
//the line is not nescessary for the movement of the cube, but makes the
//path easier to see
var line = new THREE.Line( geometry, material );
scene.add( line );

//create a test cube ojbect that will follow the enemy path
var geometry2 = new THREE.BoxGeometry(1,1,1);
var material2 = new THREE.MeshBasicMaterial({color: 0x00ff00});
var cube = new THREE.Mesh(geometry2, material2);
cube.position.x = map.path1[0][0];
cube.position.z = map.path1[0][1];
scene.add(cube);

var position = {x: map.path1[0][0], y: 0, z: map.path1[0][1]};
//var target = {x: [map.path1[1][0], map.path1[2][0]], y: 0, z: [map.path1[1][1], map.path1[2][1]]};

//create a target object with the x and z coordinates from the enemy path
var target = {};
target.x = [];
target.z = [];
target.y = 0;
for(var i=0; i<map.path1.length; i++)
{
	//add the coordinates from the path
	target.x.push(map.path1[i][0]);
	target.z.push(map.path1[i][1]);
}

//create a new tween
//this will move the cube from its starting position along the path 
//created from the path array
//will repeat 100 times
var tween = new TWEEN.Tween(cube.position)
								.to(target, 10000)
								.start();
tween.repeat(100);




console.log("gridtiles", gridTiles);

//Testing removing one tile from gridTiles
//scene.remove( gridTiles[0][0] );


var towers = [];

function tileHover( event ) {

}


//Add tower function
function addTower( object ){
	console.log("adding tower", object);
	var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0xffffff } ) );



	//needs to be updated with ray cast to get mouse position and apply to correct tile
	//needs to be check maparray to see if the tower can be added
	plane.position.x = object.x;
	plane.position.y = object.y + 1;
	plane.position.z = object.z;

	scene.add( plane );
}

//To add towers, use double click

document.addEventListener( 'dblclick', onDocumentMouseDown, false );

function onDocumentMouseDown( event ) {
	event.preventDefault();
	mouse.set( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1 );

	raycaster.setFromCamera( mouse, camera );
	var intersects = raycaster.intersectObjects( gridT );

	console.log(intersects);
	if(intersects[0].object.name == "buildable") {
		scene.remove(intersects[0].object);
		addTower( intersects[0].object.position );
	}
}

/*
window.addEventListener('dblclick', function(e) {
console.log("double click!");
addTower(e);

});
*/








	//var plane = new THREE.Mesh( planeGeo, new THREE.MeshBasicMaterial( { color: 0xffffff } ) );
	//scene.add( plane );
	/*
	var p1 = new THREE.Mesh ( planeGeo, new THREE.MeshBasicMaterial( { color: 0x0000ff } ) );
	p1.position.x = 4;
	scene.add ( p1 );
	
	var p2 = new THREE.Mesh ( planeGeo, new THREE.MeshBasicMaterial( { color: 0x00ff00 } ) );
	p2.position.x = 8;
	scene.add ( p2 );
	
	var p3 = new THREE.Mesh ( planeGeo, new THREE.MeshBasicMaterial( { color: 0xff0000 } ) );
	p3.position.x = 12;
	scene.add ( p3 );
	p3.position.z = 4;
	scene.add ( p3 );
	/*
	
	//scene.add(new THREE.Mesh ( planeGeo, new THREE.MeshBasicMaterial( { color: 0xff0000 } ) ) );
	
	
	

	
	//Move the camera to render the object
	//camera.position.z = 20;
	



	/*Rendering the scene https://www.august.com.au/blog/animating-scenes-with-webgl-three-js/*/

	animate();

	function animate(){
		requestAnimationFrame(animate);
		TWEEN.update();
		renderer.render( scene, camera );
		controls.update();
	}
	/*renderer.render(scene, camera);
	
	requestAnimationFrame(render);
	
	function render() {
			controls.update();
			
	
			
			renderer.render( scene, camera );
			requestAnimationFrame( render );
	}*/




	/* In this example we used a different way to render the scene
	
	"This [as in animate()] will create a loop that causes the renderer to 
	draw the scene every time the screen is refreshed (on a typical screen 
	this means 60 times per second). If you're new to writing games in the 
	browser, you might say "why don't we just create a setInterval ?" The 
	thing is - we could, but requestAnimationFrame has a number of 
	advantages. Perhaps the most important one is that it pauses when the 
	user navigates to another browser tab, hence not wasting their precious 
	processing power and battery life."
	
	https://threejs.org/docs/#manual/en/introduction/Creating-a-scene
	*/
	
	
	/*Rendering the scene
	
	//animate the loop!
	function animate() {
			//This will pause the animation is a user goes to another tab
			requestAnimationFrame( animate );
			
			//Animating the cube
			cube.rotation.x += 0.01;
			cube.rotation.y += 0.01;
			
			renderer.render( scene, camera );
	};
	
	animate(); */

</script>
